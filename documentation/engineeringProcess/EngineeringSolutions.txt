Problem: How will our API communicate with the game to start, stop, etc

Options:
- Force Game to provide a specific controller with certain endpoints, and we're given a base address
    - Pros: 
        - Consistency in results
    - Cons:
        - Dictates the structure of their controllers
- Force Games to support certain endpoints, we're given the base address and the controller
    - Pros: 
        - Allows User flexibility in designing the endpoints
    - Cons:
        - Requires concatinating the API call
- Admin specifies endpoints when they add the game
    - Pros: 
        - Less chance for error
    - Cons:
        - The admin may not have that information when adding the game
- Get Endpoints at runtime
    - Pros: 
        - Don't have to store the endpoints
    - Cons:
        - Can't check beforehand if the game is compatible

Problem: How do we develop our program?

Options:
    - Use Dev Containers
        - Pros:
            - The entire environment is consistent from one computer to another
        - Cons:
            - In practice, it was difficult to work with
    - Dockerize the entire project
        - Pros:
            - Relatively easy to work with, we each have a local database copy
        - Cons:
            - Issues arose with connecting to the database
    - Dockerize the project, but host an external database on Azure
        - Pros:
            - Resolves previously noted connection issues
        - Cons:
            - We're all running on one database now, which may create its own issues later on

Problem: How to deal with query parameters in the user-provided endpoints:
Notes:
    - Need to constrain data types
Options:
    - User provides URL, we say it needs to support a query parameter appropriately
    - We lock it into a url parameter

Solution: Lock them into using a query parameter because it goes at the end and there's less problems for us
